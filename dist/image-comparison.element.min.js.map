{
  "version": 3,
  "sources": ["esm/web-component/image-comparison.element.html.generated.js", "esm/web-component/image-comparison.element.css.generated.js", "esm/utils/color-blend.js", "esm/utils/color-ciede2000-diff.js", "esm/utils/color-convert.js", "esm/utils/color-metrics.js", "esm/utils/color-delta.js", "esm/utils/html-color-to-rgba.js", "esm/utils/color-diff.js", "esm/web-component/image-comparison.element.js", "esm/entrypoint/browser.js"],
  "sourcesContent": ["// generated code from src/web-component/image-comparison.element.html\nvar stdin_default = '<html><head></head><body><div class=\"container\"> <ul class=\"tab-list\"> <li><label> <input type=\"radio\" name=\"tab\" value=\"side-by-side\" checked=\"\"> side by side </label></li> <li><label> <input type=\"radio\" name=\"tab\" value=\"slider\"> slider </label></li> <li><label> <input type=\"radio\" name=\"tab\" value=\"diff\"> pixel difference </label></li> </ul> <div class=\"tab side-by-side\"> <figure> <img class=\"left-side\"> <figcaption class=\"caption--left-side\"></figcaption> </figure> <figure> <img class=\"right-side\"> <figcaption class=\"caption--right-side\"></figcaption> </figure> </div> <div class=\"tab slider\"> <div class=\"comparison-slider\"> <div class=\"overlay caption--right-side\"></div> <img class=\"right-side\"> <div class=\"resize\"> <div class=\"overlay caption--left-side\"></div> <img class=\"left-side\"> </div> <div class=\"divider\"></div> </div> </div> <div class=\"tab diff\"> <canvas class=\"diff-image\"></canvas> </div>\\n</div>\\n</body></html>';\nexport {\n  stdin_default as default\n};\n", "// generated code from src/web-component/image-comparison.element.css\nvar stdin_default = ':host{--bg-color: #e5e5e5;--bg-code-color: #f3f3f3;--bg-sidebar-color: #ddd;--sidebar-border-color: #0002;--bg-color-active: #edecef;--fg-color: #303540;--fg-color-disabled: #404550;--resizable-border-color: #303540;--tab-active-color: #007299;--antialias-diff-color: yellow }@media (prefers-color-scheme: dark){:host{--bg-color: #202530;--bg-code-color: #303540;--bg-sidebar-color: #303540;--sidebar-border-color: #fff2;--bg-color-active: #292d30;--fg-color: #dddcdf;--fg-color-disabled: #ccc;--resizable-border-color: #dddcdf;--tab-active-color: #fa5;--even-tr-bg: #ffffff08}}.tab{display:none}.tab-list{padding:1em;list-style-type:none;display:flex;justify-content:space-around;label{padding:1em;width:30%;text-align:center;&:has(input:checked),&:hover{background:var(--bg-color-active);cursor:pointer}}input{appearance:none;display:none}}.container:has(.tab-list input[value=side-by-side]:checked)>.tab.side-by-side{display:flex;gap:10px}.container:has(.tab-list input[value=slider]:checked)>.tab.slider,.container:has(.tab-list input[value=diff]:checked)>.tab.diff{display:block}.tab.side-by-side>figure{margin:0}.tab.side-by-side figcaption{text-align:center}canvas{width:100%}.comparison-slider{position:relative;width:100%;margin:0;border:5px white solid;box-sizing:border-box;>img{width:100%;height:auto;display:block}&:hover .overlay{display:block}.overlay:empty{display:none}.overlay{position:absolute;width:250px;bottom:20px;right:20px;background-color:#0006;padding:10px;box-sizing:border-box;color:#ddd;text-align:right}.resize{position:absolute;top:0;left:0;height:100%;width:50%;overflow:hidden;>img{display:block}.overlay{right:auto;left:20px;text-align:left}}.divider{position:absolute;touch-action:none;width:2px;height:100%;background-color:#fff3;left:50%;top:0;bottom:0;margin-left:-1px;cursor:ew-resize;&:before{content:\"\";position:absolute;width:20px;height:20px;left:-9px;top:50%;margin-top:-10px;background-color:#fff;transform:rotate(45deg);transition:all .1s ease-in-out}&:after{content:\"\";position:absolute;width:12px;height:12px;left:-5px;top:50%;margin-top:-6px;background-color:#fff;transform:rotate(45deg);transition:all .1s ease-in-out}&.dragging{&:before{width:30px;height:30px;left:-14px;margin-top:-15px}&:after{width:20px;height:20px;left:-9px;margin-top:-10px;background-color:#555}}}}\\n';\nexport {\n  stdin_default as default\n};\n", "/** @import { rgbcolor } from './color-types.d' */\n\n/**\n *\n * @param {number} r1 - color 1 rgba red value\n * @param {number} g1 - color 1 rgba green value\n * @param {number} b1 - color 1 rgba blue value\n * @param {number} a1 - color 1 rgba alpha value\n * @param {number} r2 - color 2 rgba red value\n * @param {number} g2 - color 2 rgba green value\n * @param {number} b2 - color 2 rgba blue value\n * @returns {rgbcolor} blended color\n */\nexport function colorBlend (r1, g1, b1, a1, r2, g2, b2) {\n  if (a1 < 255) {\n    a1 /= 255\n    const a2 = 1 - a1\n    return {\n      R: r2 * a2 + r1 * a1,\n      G: g2 * a2 + g1 * a1,\n      B: b2 * a2 + b1 * a1,\n    }\n  }\n  return { R: r1, G: g1, B: b1 }\n}\n", "/* eslint-disable camelcase */\n/** @import { labcolor } from './color-types.d' */\nconst { sqrt, pow, cos, atan2, sin, abs, exp, PI, hypot } = Math\n\n/**\n * Returns diff between c1 and c2 using the CIEDE2000 algorithm\n *\n * Implemented as in \"The CIEDE2000 Color-Difference Formula:\n * Implementation Notes, Supplementary Test Data, and Mathematical Observations\"\n * by Gaurav Sharma, Wencheng Wu and Edul N. Dalal.\n *\n * @param {labcolor} c1    CIE L*a*b* color object, should have fields L,a,b\n * @param {labcolor} c2    CIE L*a*b* color object, should have fields L,a,b\n * @returns {number}   Difference between c1 and c2\n */\nexport function ciede2000 (c1, c2) {\n  // Get L,a,b values for color 1\n  const L1 = c1.L\n  const a1 = c1.a\n  const b1 = c1.b\n\n  // Get L,a,b values for color 2\n  const L2 = c2.L\n  const a2 = c2.a\n  const b2 = c2.b\n\n  // Weight factors\n  const kL = 1\n  const kC = 1\n  const kH = 1\n\n  /**\n   * Step 1: Calculate C\u2081', C\u2082', h\u2081', h\u2082'\n   */\n  const C1 = hypot(a1, b1) // C\u2081 (2)\n  const C2 = hypot(a2, b2) // C\u2082 (2)\n\n  const a_C1_C2 = (C1 + C2) / 2.0             // (3)\n\n  const G = 0.5 * (1 - sqrt(pow(a_C1_C2, 7.0) /\n                          (pow(a_C1_C2, 7.0) + 25.0 ** 7.0))) // (4)\n\n  const a1p = (1.0 + G) * a1 // (5)\n  const a2p = (1.0 + G) * a2 // (5)\n\n  const C1p = hypot(a1p, b1) // C\u2081' (6)\n  const C2p = hypot(a2p, b2) // C\u2082' (6)\n\n  const h1p = hp_f(b1, a1p) // h\u2081' (7)\n  const h2p = hp_f(b2, a2p) // h\u2082' (7)\n\n  /**\n   * Step 2: Calculate \uD835\uDEABL', \uD835\uDEABC', \uD835\uDEABH'\n   */\n  const dLp = L2 - L1 // \uD835\uDEABL' (8)\n  const dCp = C2p - C1p // \uD835\uDEABC' (9)\n\n  const dhp = dhp_f(C1, C2, h1p, h2p) // (10)\n  const dHp = 2 * sqrt(C1p * C2p) * sin(radians(dhp) / 2.0) // \uD835\uDEABH' (11)\n\n  /**\n   * Step 3: Calculate CIEDE2000 Color-Difference\n   */\n  const a_L = (L1 + L2) / 2.0 // (12)\n  const a_Cp = (C1p + C2p) / 2.0 // (13)\n\n  const a_hp = a_hp_f(C1, C2, h1p, h2p) // (14)\n  const T = 1 - 0.17 * cos(radians(a_hp - 30)) + 0.24 * cos(radians(2 * a_hp)) +\n    0.32 * cos(radians(3 * a_hp + 6)) - 0.20 * cos(radians(4 * a_hp - 63)) // (15)\n  const d_ro = 30 * exp(-(pow((a_hp - 275) / 25, 2))) // (16)\n  const RC = sqrt((pow(a_Cp, 7.0)) / (pow(a_Cp, 7.0) + pow(25.0, 7.0)))// (17)\n  const SL = 1 + ((0.015 * pow(a_L - 50, 2)) /\n                sqrt(20 + pow(a_L - 50, 2.0)))// (18)\n  const SC = 1 + 0.045 * a_Cp// (19)\n  const SH = 1 + 0.015 * a_Cp * T// (20)\n  const RT = -2 * RC * sin(radians(2 * d_ro))// (21)\n  // (22)\n  return sqrt(pow(dLp / (SL * kL), 2) + pow(dCp / (SC * kC), 2) +\n                pow(dHp / (SH * kH), 2) + RT * (dCp / (SC * kC)) *\n                (dHp / (SH * kH)))\n}\n\n/**\n * Calculates h' value, follows the next formula:\n *\n *      \u23A7 0                b*=a'=0\n * h' = \u23A8\n *      \u23A9 tan\u207B\u00B9(b*, a')   otherwise\n *\n * @param {number} x - b* value\n * @param {number} y - a' value\n * @returns {number} h' value\n */\nfunction hp_f (x, y) { // (7)\n  if (x === 0 && y === 0) return 0\n  else {\n    const tmphp = degrees(atan2(x, y))\n    if (tmphp >= 0) return tmphp\n    else return tmphp + 360\n  }\n}\n\n/**\n * Calculates \uD835\uDEABh' value, follows the next formula:\n *\n *       \u23A7 0                C\u2081'C\u2082'=0\n *       \u23AA\n *       \u23AA h\u2082'-h\u2081'          C\u2081'C\u2082'\u22600; |h\u2082'-h\u2081'|\u2264180\u00B0\n * \uD835\uDEABh' = \u23A8\n *       \u23AA h\u2082'-h\u2081'-360      C\u2081'C\u2082'\u22600; (h\u2082'-h\u2081')>180\u00B0\n *       \u23AA\n *       \u23A9 h\u2082'-h\u2081'+360      C\u2081'C\u2082'\u22600; (h\u2082'-h\u2081')<-180\u00B0\n *\n * @param {number} C1 - C\u2081' value\n * @param {number} C2 - C\u2082' value\n * @param {number} h1p - h\u2081' value\n * @param {number} h2p - h\u2082' value\n * @returns {number} \uD835\uDEABh' value\n */\nfunction dhp_f (C1, C2, h1p, h2p) { // (10)\n  if (C1 * C2 === 0) return 0\n  else if (abs(h2p - h1p) <= 180) return h2p - h1p\n  else if ((h2p - h1p) > 180) return (h2p - h1p) - 360\n  else if ((h2p - h1p) < -180) return (h2p - h1p) + 360\n  else throw (new Error())\n}\n\n/**\n * Calculates h\u035E' value, follows the next formula:\n *\n *      \u23A7 h\u2081'+h\u2082'          C\u2081'C\u2082'=0\n *      \u23AA\n *      \u23AA h\u2081'+h\u2082'          C\u2081'C\u2082'\u22600; |h\u2081'-h\u2082'|\u2264180\u00B0\n *      \u23AA \u2500\u2500\u2500\u2500\u2500\u2500\u2500\n *      \u23AA    2\n *      \u23AA\n * h\u035E' = \u23A8 h\u2081'+h\u2082'+360      C\u2081'C\u2082'\u22600; |h\u2081'-h\u2082'|>180\u00B0; (h\u2081'+h\u2082')<360\u00B0\n *      \u23AA \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n *      \u23AA      2\n *      \u23AA\n *      \u23AA h\u2081'+h\u2082'-360      C\u2081'C\u2082'\u22600; |h\u2081'-h\u2082'|>180\u00B0; (h\u2081'+h\u2082')\u2265360\u00B0\n *      \u23AA \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n *      \u23A9      2\n *\n * @param {number} C1 - C\u2081' value\n * @param {number} C2 - C\u2082' value\n * @param {number} h1p - h\u2081' value\n * @param {number} h2p - h\u2082' value\n * @returns {number} \uD835\uDEABh' value\n */\nfunction a_hp_f (C1, C2, h1p, h2p) { // (14)\n  if (C1 * C2 === 0) return h1p + h2p\n  else if (abs(h1p - h2p) <= 180) return (h1p + h2p) / 2.0\n  else if ((abs(h1p - h2p) > 180) && ((h1p + h2p) < 360)) return (h1p + h2p + 360) / 2.0\n  else if ((abs(h1p - h2p) > 180) && ((h1p + h2p) >= 360)) return (h1p + h2p - 360) / 2.0\n  else throw (new Error())\n}\n\n/**\n * Converts radians to degrees\n * @param {number} radians - number in radians\n */\nfunction degrees (radians) { return radians * (180 / PI) }\n\n/**\n * Converts degrees to radians\n * @param {number} degrees - number in degrees\n */\nfunction radians (degrees) { return degrees * (PI / 180) }\n", "/* eslint-disable camelcase */\n/** @import { rgbcolor, labcolor, xyzcolor} from './color-types.d' */\n\nconst pow = Math.pow\n\n/**\n * Converts sRGB color `c` to CIE L*a*b*.\n * @param {rgbcolor} c standard-RGB color to convert, should have fields R,G,B\n * @returns {labcolor} the color in the CIE L*a*b* color space\n */\nexport function rgb_to_lab (c) {\n  return xyz_to_lab(rgb_to_xyz(c))\n}\n\n/**\n * Converts sRGB color to CIE 1931 XYZ color  (2\u00B0 observer). Based on {@link http://www.easyrgb.com/en/math.php}\n * @param {rgbcolor} c standard-RGB color to convert, should have fields R,G,B\n * @returns {xyzcolor} the color in the CIE 1931 XYZ color space\n */\nfunction rgb_to_xyz (c) {\n  let R = (c.R / 255)\n  let G = (c.G / 255)\n  let B = (c.B / 255)\n\n  if (R > 0.04045) R = pow(((R + 0.055) / 1.055), 2.4)\n  else R = R / 12.92\n  if (G > 0.04045) G = pow(((G + 0.055) / 1.055), 2.4)\n  else G = G / 12.92\n  if (B > 0.04045) B = pow(((B + 0.055) / 1.055), 2.4)\n  else B = B / 12.92\n\n  R *= 100\n  G *= 100\n  B *= 100\n\n  // Observer. = 2\u00B0, Illuminant = D65\n  const X = R * 0.4124 + G * 0.3576 + B * 0.1805\n  const Y = R * 0.2126 + G * 0.7152 + B * 0.0722\n  const Z = R * 0.0193 + G * 0.1192 + B * 0.9505\n  return { X, Y, Z }\n}\n\n/**\n * Converts CIE 1931 XYZ values (2\u00B0 observer) `c` to CIE L*a*b*.\n *\n * @see {@link http://www.easyrgb.com/en/math.php}\n * @param {xyzcolor} c - the CIE 1931 XYZ color to convert which refers to the D65/2\u00B0 standard illuminant, should have fields X,Y,Z\n * @returns {labcolor} the color in the CIE L*a*b* color space\n */\nexport function xyz_to_lab (c) {\n  const ref_Y = 100.000\n  const ref_Z = 108.883\n  const ref_X = 95.047 // Observer= 2\u00B0, Illuminant= D65, @see Reference values in the table below\n  let Y = c.Y / ref_Y\n  let Z = c.Z / ref_Z\n  let X = c.X / ref_X\n  if (X > 0.008856) X = pow(X, 1 / 3)\n  else X = (7.787 * X) + (16 / 116)\n  if (Y > 0.008856) Y = pow(Y, 1 / 3)\n  else Y = (7.787 * Y) + (16 / 116)\n  if (Z > 0.008856) Z = pow(Z, 1 / 3)\n  else Z = (7.787 * Z) + (16 / 116)\n  const L = (116 * Y) - 16\n  const a = 500 * (X - Y)\n  const b = 200 * (Y - Z)\n  return { L, a, b }\n}\n\n/**\n *\n * XYZ (Tristimulus) Reference values of a perfect reflecting diffuser ( source: http://www.easyrgb.com/en/math.php )\n *\n * Observer           2\u00B0 (CIE 1931)                10\u00B0 (CIE 1964)           Note\n * Illuminant    X2        Y2        Z2        X10       Y10       Z10\n * A          109.850    100.000    35.585   111.144   100.000    35.200    Incandescent/tungsten\n * B           99.0927   100.000    85.313    99.178   100.000    84.3493   Old direct sunlight at noon\n * C           98.074    100.000   118.232    97.285   100.000   116.145    Old daylight\n * D50         96.422    100.000    82.521    96.720   100.000    81.427    ICC profile PCS\n * D55         95.682    100.000    92.149    95.799   100.000    90.926    Mid-morning daylight\n * D65         95.047    100.000   108.883    94.811   100.000   107.304    Daylight, sRGB, Adobe-RGB\n * D75         94.972    100.000   122.638    94.416   100.000   120.641    North sky daylight\n * E          100.000    100.000   100.000   100.000   100.000   100.000    Equal energy\n * F1          92.834    100.000   103.665    94.791   100.000   103.191    Daylight Fluorescent\n * F2          99.187    100.000    67.395   103.280   100.000    69.026    Cool fluorescent\n * F3         103.754    100.000    49.861   108.968   100.000    51.965    White Fluorescent\n * F4         109.147    100.000    38.813   114.961   100.000    40.963    Warm White Fluorescent\n * F5          90.872    100.000    98.723    93.369   100.000    98.636    Daylight Fluorescent\n * F6          97.309    100.000    60.191   102.148   100.000    62.074    Lite White Fluorescent\n * F7          95.044    100.000   108.755    95.792   100.000   107.687    Daylight fluorescent, D65 simulator\n * F8          96.413    100.000    82.333    97.115   100.000    81.135    Sylvania F40, D50 simulator\n * F9         100.365    100.000    67.868   102.116   100.000    67.826    Cool White Fluorescent\n * F10         96.174    100.000    81.712    99.001   100.000    83.134    Ultralume 50, Philips TL85\n * F11        100.966    100.000    64.370   103.866   100.000    65.627    Ultralume 40, Philips TL84\n * F12        108.046    100.000    39.228   111.428   100.000    40.353    Ultralume 30, Philips TL83\n */\n", "import { ciede2000 } from './color-ciede2000-diff'\nimport { rgb_to_lab as rgb2lab } from './color-convert'\nconst { sqrt } = Math\n\n/**\n *\n * @param {number} r1 - rgb 1 red value\n * @param {number} g1 - rgb 1 green value\n * @param {number} b1 - rgb 1 blue value\n * @param {number} r2 - rgb 2 red value\n * @param {number} g2 - rgb 2 green value\n * @param {number} b2 - rgb 2 blue value\n * @returns {number} RGB distance value\n */\nexport function distRGB (r1, g1, b1, r2, g2, b2) {\n  const dr = r1 - r2\n  const dg = g1 - g2\n  const db = b1 - b2\n  return sqrt(dr * dr + dg * dg + db * db)\n}\n\n/**\n *\n * @param {number} r1 - rgb 1 red value\n * @param {number} g1 - rgb 1 green value\n * @param {number} b1 - rgb 1 blue value\n * @param {number} r2 - rgb 2 red value\n * @param {number} g2 - rgb 2 green value\n * @param {number} b2 - rgb 2 blue value\n * @returns {number} CIEDE2000 distance value\n */\nexport function distCIEDE2000 (r1, g1, b1, r2, g2, b2) {\n  const c1 = rgb2lab({ R: r1, G: g1, B: b1 })\n  const c2 = rgb2lab({ R: r2, G: g2, B: b2 })\n  return ciede2000(c1, c2)\n}\n\n/**\n *\n * @param {number} r1 - rgb 1 red value\n * @param {number} g1 - rgb 1 green value\n * @param {number} b1 - rgb 1 blue value\n * @param {number} r2 - rgb 2 red value\n * @param {number} g2 - rgb 2 green value\n * @param {number} b2 - rgb 2 blue value\n * @returns {number} RieRGB distance value\n */\nexport function distRieRGB (r1, g1, b1, r2, g2, b2) {\n  const mr = (r1 + r2) / 2\n  const dr = r1 - r2\n  const dg = g1 - g2\n  const db = b1 - b2\n  return sqrt((2 + mr / 256) * dr * dr + 4 * dg * dg + (2 + (255 - mr) / 256) * db * db)\n}\n\n/**\n *\n * @param {number} r1 - rgb 1 red value\n * @param {number} g1 - rgb 1 green value\n * @param {number} b1 - rgb 1 blue value\n * @param {number} r2 - rgb 2 red value\n * @param {number} g2 - rgb 2 green value\n * @param {number} b2 - rgb 2 blue value\n * @returns {number} YIQ distance value\n */\nexport function distYIQ (r1, g1, b1, r2, g2, b2) {\n  const y = rgb2y(r1, g1, b1) - rgb2y(r2, g2, b2)\n  const i = rgb2i(r1, g1, b1) - rgb2i(r2, g2, b2)\n  const q = rgb2q(r1, g1, b1) - rgb2q(r2, g2, b2)\n\n  return sqrt(y * y * 0.5053 + i * i * 0.299 + q * q * 0.1957)\n}\n\n/**\n * @param {number} r1 - rgb 1 red value\n * @param {number} g1 - rgb 1 green value\n * @param {number} b1 - rgb 1 blue value\n * @param {number} r2 - rgb 2 red value\n * @param {number} g2 - rgb 2 green value\n * @param {number} b2 - rgb 2 blue value\n * @returns {number} YIQ delta value\n */\nexport function distYIQBrightness (r1, g1, b1, r2, g2, b2) {\n  return rgb2y(r1, g1, b1) - rgb2y(r2, g2, b2)\n}\n\n/**\n * @param {number} r - rgb red value\n * @param {number} g - rgb green value\n * @param {number} b - rgb blue value\n * @returns {number} brightness value\n */\nexport function rgb2y (r, g, b) {\n  return r * 0.29889531 + g * 0.58662247 + b * 0.11448223\n}\n/**\n * @param {number} r - rgb red value\n * @param {number} g - rgb green value\n * @param {number} b - rgb blue value\n */\nfunction rgb2i (r, g, b) {\n  return r * 0.59597799 - g * 0.27417610 - b * 0.32180189\n}\n/**\n * @param {number} r - rgb red value\n * @param {number} g - rgb green value\n * @param {number} b - rgb blue value\n */\nfunction rgb2q (r, g, b) {\n  return r * 0.21147017 - g * 0.52261711 + b * 0.31114694\n}\n", "import { colorBlend } from './color-blend'\nimport { distYIQ, distCIEDE2000, distRGB, distRieRGB, distYIQBrightness } from './color-metrics'\n\n/** @param {number} num - number to round */\nconst rounded = (num) => +num.toFixed(5)\n\nexport const maxDelta = {\n  YIQ: rounded(distYIQ(0, 0, 0, 255, 255, 255)),\n  RGB: rounded(distRGB(0, 0, 0, 255, 255, 255)),\n  RieRGB: rounded(distRieRGB(0, 0, 0, 255, 255, 255)),\n  CIEDE2000: rounded(distCIEDE2000(0, 0, 0, 255, 255, 255)),\n  Brightness: rounded(Math.abs(distYIQBrightness(0, 0, 0, 255, 255, 255))),\n}\n\nexport const validAlgorithms = Object.freeze(/** @type {const} */(['YIQ', 'CIEDE2000', 'RGB', 'RieRGB', 'Brightness']))\n/** @typedef {(typeof validAlgorithms)[number]} Algorithm */\n\n/**\n *\n * @param {Uint8Array | Uint8ClampedArray} img1 - original image\n * @param {Uint8Array | Uint8ClampedArray} img2 - image to compare\n * @param {number} posImg1 - pixel position on `img1`\n * @param {number} posImg2 - pixel position on `img2`\n * @param {Algorithm} algorithm - algorithm used to calculate delta defaults to CIEDE2000\n * @returns {colorDelta} color delta result\n */\nexport function colorDeltaImgPosition (img1, img2, posImg1, posImg2, algorithm) {\n  const r1 = img1[posImg1 + 0]\n  const g1 = img1[posImg1 + 1]\n  const b1 = img1[posImg1 + 2]\n  const a1 = img1[posImg1 + 3]\n\n  const r2 = img2[posImg2 + 0]\n  const g2 = img2[posImg2 + 1]\n  const b2 = img2[posImg2 + 2]\n  const a2 = img2[posImg2 + 3]\n\n  return colorDelta(r1, g1, b1, a1, r2, g2, b2, a2, algorithm)\n}\n\n/**\n * calculate color difference according to the paper \"Measuring perceived color difference\n * using YIQ NTSC transmission color space in mobile applications\" by Y. Kotsarenko and F. Ramos\n * @param {number} r1 - color 1 rgba red value\n * @param {number} g1 - color 1 rgba green value\n * @param {number} b1 - color 1 rgba blue value\n * @param {number} a1 - color 1 rgba alpha value\n * @param {number} r2 - color 2 rgba red value\n * @param {number} g2 - color 2 rgba green value\n * @param {number} b2 - color 2 rgba blue value\n * @param {number} a2 - color 2 rgba alpha value\n * @param {Algorithm} algorithm - algorithm used to calculate delta defaults to CIEDE2000\n * @returns {colorDelta} color delta result\n */\nexport function colorDelta (r1, g1, b1, a1, r2, g2, b2, a2, algorithm) {\n  algorithm = Object.hasOwn(maxDelta, algorithm) ? algorithm : 'CIEDE2000'\n\n  if (a1 === a2 && r1 === r2 && g1 === g2 && b1 === b2) {\n    return {\n      delta: 0,\n      maxDelta: maxDelta[algorithm],\n    }\n  }\n\n  const algorithmFunction = (() => {\n    switch (algorithm) {\n      case 'YIQ': return distYIQ\n      case 'RGB': return distRGB\n      case 'RieRGB': return distRieRGB\n      case 'Brightness': return distYIQBrightness\n      case 'CIEDE2000':\n      default: return distCIEDE2000\n    }\n  })()\n\n  if (a1 < 255 || a2 < 255) {\n    const rgb1Light = colorBlend(r1, g1, b1, a1, 255, 255, 255)\n    const rgb2Light = colorBlend(r2, g2, b2, a2, 255, 255, 255)\n    const deltaLightBlend = rounded(algorithmFunction(\n      rgb1Light.R, rgb1Light.G, rgb1Light.B,\n      rgb2Light.R, rgb2Light.G, rgb2Light.B\n    ))\n\n    const rgb1Dark = colorBlend(r1, g1, b1, a1, 0, 0, 0)\n    const rgb2Dark = colorBlend(r2, g2, b2, a2, 0, 0, 0)\n    const deltaDarkBlend = rounded(algorithmFunction(\n      rgb1Dark.R, rgb1Dark.G, rgb1Dark.B,\n      rgb2Dark.R, rgb2Dark.G, rgb2Dark.B\n    ))\n\n    return {\n      delta: Math.max(deltaLightBlend, deltaDarkBlend),\n      maxDelta: maxDelta[algorithm],\n    }\n  }\n\n  const delta = rounded(algorithmFunction(r1, g1, b1, r2, g2, b2))\n  return {\n    delta,\n    maxDelta: maxDelta[algorithm],\n  }\n}\n\n/**\n * @typedef {object} colorDelta\n * @property {number} delta - color delta result\n * @property {number} maxDelta - max possible result value\n */\n", "/**\n * @template {(...args: any) => any} T\n * @param {T} func - function to memoize\n */\nconst memoize = function (func) {\n  const cache = /** @type {{[key: string]: ReturnType<typeof func>}} */({})\n  return function (/** @type {string} */ key) {\n    if (!(key in cache)) {\n      cache[key] = func(key)\n    }\n    return cache[key]\n  }\n}\n\nconst colorToRGBA = (function () {\n  const canvas = new OffscreenCanvas(1, 1)\n  canvas.width = canvas.height = 1\n  const ctx = canvas.getContext('2d')\n  if (!ctx) { throw Error('unreachable code') }\n\n  /**\n   * @param {string} color - color name or code\n   */\n  const convertColor = function (color) {\n    ctx.clearRect(0, 0, 1, 1)\n    // In order to detect invalid values,\n    // we can't rely on col being in the same format as what fillStyle is computed as,\n    // but we can ask it to implicitly compute a normalized value twice and compare.\n    ctx.fillStyle = '#000'\n    ctx.fillStyle = color\n    const computed = ctx.fillStyle\n    ctx.fillStyle = '#fff'\n    ctx.fillStyle = color\n    if (computed !== ctx.fillStyle) {\n      return // invalid color\n    }\n    ctx.fillRect(0, 0, 1, 1)\n    return [...ctx.getImageData(0, 0, 1, 1).data]\n  }\n\n  return memoize(convertColor)\n})()\n\n/**\n * @param {string} color - color name or code\n * @param {string} fallbackColor - fallback color name or code\n * @returns {number[]} rgba color values\n */\nexport function colorOrFallbackColorToRGBA (color, fallbackColor) {\n  // Don't short-circuit getting the fallback RGBA -\n  // it's already memoized, and we want to show an error\n  // if the fallback color is invalid even if the main color is valid\n  const fallbackRGBA = colorToRGBA(fallbackColor)\n  if (!fallbackRGBA) {\n    throw new Error(`Invalid fallbackColor ${fallbackColor != null ? JSON.stringify(fallbackColor) : fallbackColor}`)\n  }\n  return colorToRGBA(color) || fallbackRGBA\n}\n", "/* eslint-disable sonarjs/cognitive-complexity */\n\nimport { colorDeltaImgPosition, validAlgorithms } from './color-delta'\nimport { rgb2y } from './color-metrics'\nimport { colorOrFallbackColorToRGBA } from './html-color-to-rgba'\n/** @import {Algorithm} from './color-delta' */\n\nconst fallbackAAColor = 'yellow'\nconst fallbackDiffColor = 'red'\n\n/**\n * @param {object} params - function parameters\n * @param {Uint8Array | Uint8ClampedArray} params.img1 - original image\n * @param {Uint8Array | Uint8ClampedArray} params.img2 - image to compare\n * @param {number} params.width - images width\n * @param {number} params.height - images height\n * @param {Algorithm} [params.algorithm] - output image\n * @returns {{identical: boolean, diffMap: Uint8Array}} number of different pixels\n */\nexport function getNormalizedDiffs ({ img1, img2, width, height, algorithm = 'CIEDE2000' }) {\n  validateImagePreconditions({ img1, img2, width, height })\n  if (!validAlgorithms.includes(algorithm)) { throw new Error(`Invalid algorithm ${algorithm}, expected algorithms: ${validAlgorithms.join(', ')}.`) }\n\n  const len = width * height\n  const diffMap = new Uint8Array(len)\n  const a32 = new Uint32Array(img1.buffer, img1.byteOffset, len)\n  const b32 = new Uint32Array(img2.buffer, img2.byteOffset, len)\n  let identical = true\n\n  for (let pixelPos = 0; pixelPos < len; pixelPos++) {\n    if (a32[pixelPos] === b32[pixelPos]) { continue } // Fast way to check if pixels are identical\n    const pos = pixelPos * 4\n    const { delta, maxDelta } = colorDeltaImgPosition(img1, img2, pos, pos, algorithm)\n    diffMap[pixelPos] = Math.ceil(Math.abs(delta) * 100 / maxDelta)\n    identical = false\n  }\n\n  return { identical, diffMap }\n}\n\n/**\n * Gets antialias map for non-identical pixels\n *\n * The result is an byte array, where 3 out of 8 bits are used ( e.g. 1100001 )\n * first bit just tells if it was worked on, useful when calculating partial antialias map and recalculate again\n * second bit just tells if it was calculated or ignored, no antialias is calculated on identical pixels\n * last bit tells if the pixel is an antialias pixel\n *\n * @param {object} params - function parameters\n * @param {Uint8Array | Uint8ClampedArray} params.img1 - original image\n * @param {Uint8Array | Uint8ClampedArray} params.img2 - image to compare\n * @param {number} params.width - images width\n * @param {number} params.height - images height\n * @returns {Uint8Array} anti alias map\n */\nexport function getAntiAliasMap (params) {\n  validateImagePreconditions(params)\n  const { img1, img2, width, height } = params\n  const len = width * height\n  const antiAliasMap = new Uint8Array(len)\n  const a32 = new Uint32Array(img1.buffer, img1.byteOffset, len)\n  const b32 = new Uint32Array(img2.buffer, img2.byteOffset, len)\n\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      const pos = y * width + x\n      if (a32[pos] === b32[pos]) { // Fast way to check if pixels are identical\n        antiAliasMap[pos] = 0b1000_0000\n      } else if (antialiased(img1, x, y, width, height, img2) || antialiased(img2, x, y, width, height, img1)) {\n        antiAliasMap[pos] = 0b1100_0001\n      } else {\n        antiAliasMap[pos] = 0b1100_0000\n      }\n    }\n  }\n  return antiAliasMap\n}\n/**\n * @param {object} params - function parameters\n * @param {Uint8Array | Uint8ClampedArray} params.img1 - original image\n * @param {Uint8Array | Uint8ClampedArray} params.img2 - image to compare\n * @param {number} params.width - images width\n * @param {number} params.height - images height\n * @param {Uint8Array | Uint8ClampedArray | null} [params.output] - output image\n * @param {Uint8Array | Uint8ClampedArray | null} [params.antialiasOutput] - output image for\n *     antialias, useful if you need a separate image for antialias, uses `params.output` if\n *     undefined\n * @param {number} [params.threshold] - theshold value, integer number between 0 and 100, both\n *     inclusive, if the difference is below or equal the theshold, it is considered similar\n *     pixel, and will not count as a different pixel\n * @param {boolean} [params.antialias] - whether to include anti-aliasing detection\n * @param {string} [params.aaColor] - color of anti-aliased pixels in diff output\n * @param {string} [params.diffColor] - color of different pixels in diff output\n * @param {boolean} [params.diffMask] - whether to include anti-aliasing detection\n * @param {number} [params.alpha] - // opacity of original image in diff output\n * @returns {{diffPixelAmount: number, aaPixelAmount: number}} number of different pixels\n */\nexport function calculateDiff ({\n  img1, img2, output, antialiasOutput, width, height,\n  threshold = 10,\n  antialias = false,\n  aaColor = fallbackAAColor,\n  diffColor = fallbackDiffColor,\n  diffMask = false,\n  alpha = 0.1,\n}) {\n  antialiasOutput ??= output\n\n  validateImagePreconditions({ img1, img2, width, height, output })\n  if (img1.length !== img2.length || (output && output.length !== img1.length) || (antialiasOutput && antialiasOutput.length !== img1.length)) { throw new Error('Image sizes do not match.') }\n\n  const { identical, diffMap } = getNormalizedDiffs({ img1, img2, width, height, algorithm: 'CIEDE2000' })\n\n  if (identical) { // fast path if identical\n    if (output && !diffMask) {\n      for (let i = 0, len = width * height; i < len; i++) drawGrayPixel(img1, 4 * i, alpha, output)\n    }\n    return {\n      diffPixelAmount: 0,\n      aaPixelAmount: 0,\n    }\n  }\n\n  const antiAliasMap = antialias ? getAntiAliasMap({ img1, img2, width, height }) : null\n\n  const [aaR, aaG, aaB] = colorOrFallbackColorToRGBA(aaColor, fallbackAAColor)\n  const [diffR, diffG, diffB] = colorOrFallbackColorToRGBA(diffColor, fallbackDiffColor)\n  let diffPixelAmount = 0\n  let aaPixelAmount = 0\n\n  // compare each pixel of one image against the other one\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      const pos = (y * width + x) * 4\n\n      const normalizedDelta = diffMap[y * width + x]\n\n      // the color difference is above the threshold\n      if (normalizedDelta > threshold) {\n        // check it's a real rendering difference or just anti-aliasing\n        if (antiAliasMap && (antiAliasMap[y * width + x] & 1) === 1) {\n          // one of the pixels is anti-aliasing; draw as yellow and do not count as difference\n          if (antialiasOutput) drawPixel(antialiasOutput, pos, aaR, aaG, aaB)\n          aaPixelAmount++\n        } else {\n          // found substantial difference not caused by anti-aliasing; draw it as such\n          if (output) {\n            drawPixel(output, pos, diffR, diffG, diffB)\n          }\n          diffPixelAmount++\n        }\n      } else if (output && !diffMask) {\n        // pixels are similar; draw background as grayscale image blended with white\n        drawGrayPixel(img1, pos, alpha, output)\n      }\n    }\n  }\n\n  // return the number of different pixels\n  return {\n    diffPixelAmount,\n    aaPixelAmount,\n  }\n}\n\n/**\n * Checks if `arr` is an 8-bit unsigned integer typed array\n * @param {ArrayBufferView} arr - target object\n */\nfunction isPixelData (arr) {\n  return arr instanceof Uint8Array || arr instanceof Uint8ClampedArray\n}\n\n/**\n *  check if a pixel is likely a part of anti-aliasing;\n *  based on \"Anti-aliased Pixel and Intensity Slope Detector\" paper by V. Vysniauskas, 2009\n * @param {Uint8Array | Uint8ClampedArray} img - original image\n * @param {number} x1 - pixel horizontal position\n * @param {number} y1 - pixel vertical position\n * @param {number} width - images width\n * @param {number} height - images height\n * @param {Uint8Array | Uint8ClampedArray} img2 - image to compare\n */\nfunction antialiased (img, x1, y1, width, height, img2) {\n  const x0 = Math.max(x1 - 1, 0)\n  const y0 = Math.max(y1 - 1, 0)\n  const x2 = Math.min(x1 + 1, width - 1)\n  const y2 = Math.min(y1 + 1, height - 1)\n  const pos = (y1 * width + x1) * 4\n  let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0\n  let min = 0\n  let max = 0\n  let minX = width\n  let minY = height\n  let maxX = 0\n  let maxY = 0\n\n  // go through 8 adjacent pixels\n  for (let x = x0; x <= x2; x++) {\n    for (let y = y0; y <= y2; y++) {\n      if (x === x1 && y === y1) continue\n\n      // brightness delta between the center pixel and adjacent one\n      const { delta } = colorDeltaImgPosition(img, img, pos, (y * width + x) * 4, 'Brightness')\n\n      // count the number of equal, darker and brighter adjacent pixels\n      if (delta === 0) {\n        zeroes++\n        // if found more than 2 equal siblings, it's definitely not anti-aliasing\n        if (zeroes > 2) return false\n\n        // remember the darkest pixel\n      } else if (delta < min) {\n        min = delta\n        minX = x\n        minY = y\n\n        // remember the brightest pixel\n      } else if (delta > max) {\n        max = delta\n        maxX = x\n        maxY = y\n      }\n    }\n  }\n\n  // if there are no both darker and brighter pixels among siblings, it's not anti-aliasing\n  if (min === 0 || max === 0) return false\n\n  // if either the darkest or the brightest pixel has 3+ equal siblings in both images\n  // (definitely not anti-aliased), this pixel is anti-aliased\n  return (hasManySiblings(img, minX, minY, width, height) && hasManySiblings(img2, minX, minY, width, height)) ||\n           (hasManySiblings(img, maxX, maxY, width, height) && hasManySiblings(img2, maxX, maxY, width, height))\n}\n\n// check if a pixel has 3+ adjacent pixels of the same color.\n/**\n *\n * @param {Uint8Array | Uint8ClampedArray} img - original image\n * @param {number} x1 - pixel horizontal position\n * @param {number} y1 - pixel vertical position\n * @param {number} width - images width\n * @param {number} height - images height\n */\nfunction hasManySiblings (img, x1, y1, width, height) {\n  const x0 = Math.max(x1 - 1, 0)\n  const y0 = Math.max(y1 - 1, 0)\n  const x2 = Math.min(x1 + 1, width - 1)\n  const y2 = Math.min(y1 + 1, height - 1)\n  const pos = (y1 * width + x1) * 4\n  let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0\n\n  // go through 8 adjacent pixels\n  for (let x = x0; x <= x2; x++) {\n    for (let y = y0; y <= y2; y++) {\n      if (x === x1 && y === y1) continue\n\n      const pos2 = (y * width + x) * 4\n      if (img[pos] === img[pos2] &&\n                img[pos + 1] === img[pos2 + 1] &&\n                img[pos + 2] === img[pos2 + 2] &&\n                img[pos + 3] === img[pos2 + 3]) zeroes++\n\n      if (zeroes > 2) return true\n    }\n  }\n\n  return false\n}\n\n/**\n *\n * @param {Uint8Array | Uint8ClampedArray } output - output image\n * @param {number} pos - image position\n * @param {number} r - rgb red value\n * @param {number} g - rgb green value\n * @param {number} b - rgb blue value\n */\nfunction drawPixel (output, pos, r, g, b) {\n  output[pos + 0] = r\n  output[pos + 1] = g\n  output[pos + 2] = b\n  output[pos + 3] = 255\n}\n\n/**\n *\n * @param {Uint8Array | Uint8ClampedArray} img - original image\n * @param {number} pos - image position\n * @param {number} alpha - alpha value\n * @param {Uint8Array | Uint8ClampedArray } output - output image\n */\nfunction drawGrayPixel (img, pos, alpha, output) {\n  const r = img[pos + 0]\n  const g = img[pos + 1]\n  const b = img[pos + 2]\n  const a = alpha * img[pos + 3] / 255\n  const brightness = rgb2y(r, g, b)\n  const val = 255 + (brightness - 255) * a\n  drawPixel(output, pos, val, val, val)\n}\n\n/**\n * @param {object} params - function parameters\n * @param {Uint8Array | Uint8ClampedArray} params.img1 - original image\n * @param {Uint8Array | Uint8ClampedArray} params.img2 - image to compare\n * @param {Uint8Array | Uint8ClampedArray | null} [params.output] - output image\n * @param {number} params.width - images width\n * @param {number} params.height - images height\n */\nfunction validateImagePreconditions ({ img1, img2, width, height, output }) {\n  if (!isPixelData(img1) || !isPixelData(img2) || (output && !isPixelData(output))) { throw new Error('Image data: Uint8Array or Uint8ClampedArray expected.') }\n\n  if (img1.length !== img2.length) { throw new Error('Image sizes do not match.') }\n\n  if (img1.length !== width * height * 4) { throw new Error('Image data size does not match width/height.') }\n}\n", "import html from './image-comparison.element.html.generated.js'\nimport css from './image-comparison.element.css.generated.js'\nimport { calculateDiff } from '../utils/color-diff'\nimport { colorOrFallbackColorToRGBA } from '../utils/html-color-to-rgba'\n\nlet loadTemplate = () => {\n  const templateElement = document.createElement('template')\n  templateElement.innerHTML = html\n  loadTemplate = () => templateElement\n  return templateElement\n}\nlet loadStyles = () => {\n  const sheet = new CSSStyleSheet()\n  sheet.replaceSync(css)\n  loadStyles = () => sheet\n  return sheet\n}\n\nconst leftImgSelector = 'img.left-side'\nconst rightImgSelector = 'img.right-side'\n\nconst intersectionObserver = new IntersectionObserver((entries) => {\n  for (const entry of entries) {\n    updateSliderDimensions(entry.target)\n  }\n})\n\nconst canvasIntersectionObserver = new IntersectionObserver((entries) => {\n  for (const entry of entries) {\n    const rootNode = entry.target.getRootNode()\n    if (!(rootNode instanceof ShadowRoot)) { return }\n    const { host } = rootNode\n    if (!(host instanceof ImageComparisonElement)) { return }\n    updateDiffColors(host)\n  }\n})\n\nconst resizeObserver = new ResizeObserver((entries) => {\n  for (const entry of entries) {\n    updateSliderDimensions(entry.target)\n  }\n})\n\nconst componentData = new WeakMap()\n\nexport class ImageComparisonElement extends HTMLElement {\n  constructor () {\n    super()\n    const shadowRoot = this.attachShadow({ mode: 'open' })\n    shadowRoot.adoptedStyleSheets = [loadStyles()]\n    const template = loadTemplate()\n    shadowRoot.append(document.importNode(template.content, true))\n    const slider = shadowRoot.querySelector('.comparison-slider')\n    if (!slider) { return }\n    addSliderDragBehaviour(slider)\n    intersectionObserver.observe(slider)\n    resizeObserver.observe(slider)\n    shadowRoot.querySelector(leftImgSelector)?.addEventListener('load', () => this.updateCanvas())\n    shadowRoot.querySelector(rightImgSelector)?.addEventListener('load', () => this.updateCanvas())\n    componentData.set(this, {})\n  }\n\n  connectedCallback () {\n    const shadowRoot = this.shadowRoot\n    if (!shadowRoot) {\n      return\n    }\n    const imgsLightDom = this.querySelectorAll(':scope > img, :scope > figure > img')\n\n    if (imgsLightDom.length > 0) {\n      const leftImg = imgsLightDom[0]\n      if (leftImg.parentElement?.matches('figure')) {\n        const text = leftImg.parentElement?.querySelector(':scope > figcaption')?.textContent\n        shadowRoot.querySelectorAll('.caption--left-side').forEach((element) => { element.textContent = text ?? '' })\n      }\n      shadowRoot.querySelectorAll(leftImgSelector).forEach(img => { img.src = leftImg.src })\n    }\n\n    if (imgsLightDom.length > 1) {\n      const leftImg = imgsLightDom[1]\n      if (leftImg.parentElement?.matches('figure')) {\n        const text = leftImg.parentElement?.querySelector(':scope > figcaption')?.textContent\n        shadowRoot.querySelectorAll('.caption--right-side').forEach((element) => { element.textContent = text ?? '' })\n      }\n      shadowRoot.querySelectorAll(rightImgSelector).forEach(img => { img.src = leftImg.src })\n    }\n  }\n\n  updateCanvas () {\n    const { shadowRoot } = this\n    if (!shadowRoot) { return }\n    shadowRoot.querySelectorAll('canvas.diff-image').forEach(canvas => {\n      const leftImage = shadowRoot.querySelector(leftImgSelector)\n      const rightImage = shadowRoot.querySelector(rightImgSelector)\n\n      if (!isLoadedImg(leftImage) || !isLoadedImg(rightImage)) {\n        return\n      }\n\n      const width = leftImage.naturalWidth\n      const height = leftImage.naturalHeight\n      canvas.width = width\n      canvas.height = height\n\n      const offCanvas1 = new OffscreenCanvas(width, height)\n      const context1 = offCanvas1.getContext('2d')\n\n      const offCanvas2 = new OffscreenCanvas(width, height)\n      const context2 = offCanvas2.getContext('2d')\n\n      const context3 = canvas.getContext('2d')\n\n      if (!context1 || !context2 || !context3) { return }\n\n      context1?.drawImage(leftImage, 0, 0)\n      context2?.drawImage(rightImage, 0, 0)\n\n      const img1 = context1.getImageData(0, 0, width, height)\n      const img2 = context2.getImageData(0, 0, width, height)\n      const diff = context3.createImageData(width, height, { colorSpace: 'srgb' })\n      const antialiasImgData = new Uint8ClampedArray(width * height * 4)\n\n      const data = componentData.get(this)\n\n      data.aaData = antialiasImgData\n      data.appliedAAColor = null\n\n      data.diffs = calculateDiff({\n        img1: img1.data,\n        img2: img2.data,\n        output: diff.data,\n        antialiasOutput: antialiasImgData,\n        aaColor: 'black',\n        width,\n        height,\n        antialias: this.antialias\n      })\n      this.setAttribute('data-diff-pixels', data.diffs.diffPixelAmount.toString())\n\n      if (this.antialias) {\n        this.setAttribute('data-diff-antialias', data.diffs.aaPixelAmount.toString())\n      }\n\n      context3.putImageData(diff, 0, 0)\n      updateDiffColors(this)\n      canvasIntersectionObserver.observe(canvas)\n    })\n  }\n\n  get diffPixelsAmount () {\n    return componentData.get(this).diffPixelAmount ?? NaN\n  }\n\n  get antialiasedPixelsAmount () {\n    return componentData.get(this).aaPixelAmount ?? NaN\n  }\n\n  get antialias () {\n    return this.hasAttribute('data-antialias')\n  }\n\n  set antialias (val) {\n    this.toggleAttribute('data-antialias', !!val)\n  }\n}\n\n/**\n *\n * @param {ImageComparisonElement} component - component\n */\nfunction updateDiffColors (component) {\n  const data = componentData.get(component)\n\n  const antialiasImgData = data.aaData\n  const appliedAAColor = data.appliedAAColor\n  if (!antialiasImgData) { return }\n\n  const aaColorToApply = getComputedStyle(component).getPropertyValue('--antialias-diff-color')\n  if (aaColorToApply === appliedAAColor) { return }\n\n  const { shadowRoot } = component\n  if (!shadowRoot) { return }\n  shadowRoot.querySelectorAll('canvas.diff-image').forEach(canvas => {\n    const context = canvas.getContext('2d')\n    if (!context) { return }\n    const diff = context.getImageData(0, 0, canvas.width, canvas.height, { colorSpace: 'srgb' })\n\n    const aaRGBAColor = colorOrFallbackColorToRGBA(aaColorToApply, 'yellow')\n    for (let pos = 0, e = antialiasImgData.length; pos < e; pos += 4) {\n      if (antialiasImgData[pos + 3] > 0) {\n        const { data } = diff\n        data[pos] = aaRGBAColor[0]\n        data[pos + 1] = aaRGBAColor[1]\n        data[pos + 2] = aaRGBAColor[2]\n        data[pos + 3] = aaRGBAColor[3]\n      }\n    }\n    data.appliedAAColor = aaColorToApply\n    context.putImageData(diff, 0, 0)\n  })\n}\n\n/**\n * @param { HTMLImageElement | null} img - target object\n * @returns {img is HTMLImageElement} true if img is a loaded HTMLImageElement, false otherwise\n */\nfunction isLoadedImg (img) {\n  return img != null && img.complete && img.naturalWidth !== 0\n}\n\n/**\n * Ensures both images in slider have the same width\n * @param {Element} slider - slider element container\n */\nfunction updateSliderDimensions (slider) {\n  const rightSideImage = slider.querySelector(':scope > img')\n  const leftSideImage = slider.querySelector('.resize img')\n  if (!leftSideImage || !rightSideImage) { return }\n  const imgWidth = rightSideImage.getBoundingClientRect().width + 'px'\n  leftSideImage.style.width = imgWidth\n}\n\n/**\n * Add slider behaviour\n * @param {Element} slider - slider element container\n */\nfunction addSliderDragBehaviour (slider) {\n  const dragElement = slider.querySelector('div.divider')\n  const resizeElement = slider.querySelector('div.resize')\n\n  if (!dragElement || !resizeElement) { return }\n\n  let dragWidth = 0\n  let containerOffset = 0\n  let containerWidth = 0\n  let minLeft = 0\n  let maxLeft = 0\n\n  /**\n   * @param {PointerEvent} event - pointer move event\n   */\n  const pointermovehandler = function (event) {\n    // if the user is using mouse, use preventDefault to prevent the user from\n    // selecting the images as he moves the silder around.\n    if (event.pointerType === 'mouse') {\n      event.preventDefault()\n    }\n\n    const moveX = event.clientX\n    let leftValue = moveX - dragWidth\n\n    // stop the divider from going over the limits of the container\n    if (leftValue < minLeft) {\n      leftValue = minLeft\n    } else if (leftValue > maxLeft) {\n      leftValue = maxLeft\n    }\n\n    const widthValue = (leftValue + dragWidth / 2 - containerOffset) * 100 / containerWidth + '%'\n\n    dragElement.style.left = widthValue\n    resizeElement.style.width = widthValue\n  }\n\n  dragElement.addEventListener('pointerdown', () => {\n    dragElement.classList.add('dragging')\n\n    dragWidth = dragElement.getBoundingClientRect().width\n    containerOffset = slider.getBoundingClientRect().left\n    containerWidth = slider.getBoundingClientRect().width\n    minLeft = containerOffset + 10\n    maxLeft = containerOffset + containerWidth - dragWidth - 10\n\n    window.addEventListener('pointermove', pointermovehandler)\n\n    window.addEventListener('pointerup', () => {\n      // stop clicping the image and move the slider\n      dragElement.classList.remove('dragging')\n      window.removeEventListener('pointermove', pointermovehandler)\n    }, { once: true })\n  })\n}\n", "import { ImageComparisonElement as Element } from '../web-component/image-comparison.element.js'\nconst url = new URL(import.meta.url)\nconst tagName = url.searchParams.get('named')?.trim()\ntagName && customElements.define(tagName, Element)\nexport const ImageComparisonElement = Element\nexport default ImageComparisonElement\n"],
  "mappings": "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",
  "names": ["stdin_default", "stdin_default", "colorBlend", "r1", "g1", "b1", "a1", "r2", "g2", "b2", "a2", "sqrt", "pow", "cos", "atan2", "sin", "abs", "exp", "PI", "hypot", "ciede2000", "c1", "c2", "L1", "a1", "b1", "L2", "a2", "b2", "kL", "kC", "kH", "C1", "C2", "a_C1_C2", "G", "a1p", "a2p", "C1p", "C2p", "h1p", "hp_f", "h2p", "dLp", "dCp", "dhp", "dhp_f", "dHp", "radians", "a_L", "a_Cp", "a_hp", "a_hp_f", "T", "d_ro", "RC", "SL", "SC", "SH", "RT", "x", "y", "tmphp", "degrees", "pow", "rgb_to_lab", "c", "xyz_to_lab", "rgb_to_xyz", "R", "G", "B", "X", "Y", "Z", "L", "a", "b", "sqrt", "distRGB", "r1", "g1", "b1", "r2", "g2", "b2", "dr", "dg", "db", "distCIEDE2000", "c1", "rgb_to_lab", "c2", "ciede2000", "distRieRGB", "mr", "distYIQ", "y", "rgb2y", "i", "rgb2i", "q", "rgb2q", "distYIQBrightness", "r", "g", "b", "rounded", "num", "maxDelta", "distYIQ", "distRGB", "distRieRGB", "distCIEDE2000", "distYIQBrightness", "validAlgorithms", "colorDeltaImgPosition", "img1", "img2", "posImg1", "posImg2", "algorithm", "r1", "g1", "b1", "a1", "r2", "g2", "b2", "a2", "colorDelta", "algorithmFunction", "rgb1Light", "colorBlend", "rgb2Light", "deltaLightBlend", "rgb1Dark", "rgb2Dark", "deltaDarkBlend", "memoize", "func", "cache", "key", "colorToRGBA", "canvas", "ctx", "color", "computed", "colorOrFallbackColorToRGBA", "fallbackColor", "fallbackRGBA", "fallbackAAColor", "fallbackDiffColor", "getNormalizedDiffs", "img1", "img2", "width", "height", "algorithm", "validateImagePreconditions", "validAlgorithms", "len", "diffMap", "a32", "b32", "identical", "pixelPos", "pos", "delta", "maxDelta", "colorDeltaImgPosition", "getAntiAliasMap", "params", "antiAliasMap", "y", "x", "antialiased", "calculateDiff", "output", "antialiasOutput", "threshold", "antialias", "aaColor", "diffColor", "diffMask", "alpha", "i", "drawGrayPixel", "aaR", "aaG", "aaB", "colorOrFallbackColorToRGBA", "diffR", "diffG", "diffB", "diffPixelAmount", "aaPixelAmount", "drawPixel", "isPixelData", "arr", "img", "x1", "y1", "x0", "y0", "x2", "y2", "zeroes", "min", "max", "minX", "minY", "maxX", "maxY", "hasManySiblings", "pos2", "r", "g", "b", "a", "val", "rgb2y", "loadTemplate", "templateElement", "stdin_default", "loadStyles", "sheet", "leftImgSelector", "rightImgSelector", "intersectionObserver", "entries", "entry", "updateSliderDimensions", "canvasIntersectionObserver", "rootNode", "host", "ImageComparisonElement", "updateDiffColors", "resizeObserver", "componentData", "shadowRoot", "template", "slider", "addSliderDragBehaviour", "imgsLightDom", "leftImg", "text", "element", "img", "canvas", "leftImage", "rightImage", "isLoadedImg", "width", "height", "context1", "context2", "context3", "img1", "img2", "diff", "antialiasImgData", "data", "calculateDiff", "val", "component", "appliedAAColor", "aaColorToApply", "context", "aaRGBAColor", "colorOrFallbackColorToRGBA", "pos", "e", "rightSideImage", "leftSideImage", "imgWidth", "dragElement", "resizeElement", "dragWidth", "containerOffset", "containerWidth", "minLeft", "maxLeft", "pointermovehandler", "event", "leftValue", "widthValue", "url", "tagName", "ImageComparisonElement", "browser_default"]
}
